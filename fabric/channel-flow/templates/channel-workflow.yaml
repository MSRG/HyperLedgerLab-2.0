{{- $vars:= dict}}
{{- $ordererOrg := index .Values.OrdererOrgs 0 }}
{{- $ordererAddress := $.Values.useActualDomains | ternary (printf "%s.%s" (index $ordererOrg.Specs 0).Hostname $ordererOrg.Domain) (printf "hlf-orderer--%s--%s" ($ordererOrg.Name | lower) ((index $ordererOrg.Specs 0).Hostname | lower)) }} 
{{- $_ := set $vars "ordererOrgName" $ordererOrg.Name }}
{{- $_ := set $vars "ordererUrl" (printf "%s:7050" $ordererAddress ) }}
{{- $_ := set $vars "ordererHost" (index $ordererOrg.Specs 0).Hostname }}
{{- $_ := set $vars "ordererTlsSecret"  (printf "hlf-orderer--%s-tlsca" ($ordererOrg.Name | lower)) }}

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: hlf-channels-
spec:
  entrypoint: channels
  
  imagePullSecrets:
  - name: regcred
  
  # additional entries going into /etc/hosts file
  {{- if $.Values.hostAliases }}
  hostAliases:
  {{- range $i, $alias := $.Values.hostAliases }}
  - ip: {{ $alias.ip }}
    hostnames: {{ $alias.hostnames }}
  {{- end }}
  {{- end }}{{""}}
  
  volumes:
  - name: hlf-scripts
    configMap:
      name: hlf-scripts
      defaultMode: 0777 # make scripts executable
  - name: hlf-configtx
    secret:
      secretName: hlf-configtx.yaml
  - name: orderer-tlsca
    secret:
      secretName: {{ $vars.ordererTlsSecret }}

{{- range $i, $org := .Values.PeerOrgs }}

  - name: peer-{{ $org.Name | lower }}-admin-msp
    secret:
      secretName: hlf-peer--{{ $org.Name | lower }}--admin-msp
      items:
      - key: config.yaml
        path: config.yaml
      - key: cert.pem
        path: signcerts/cert.pem
      - key: key.pem
        path: keystore/key.pem
      - key: cacert.pem
        path: cacerts/ca.{{ $org.Domain }}-cert.pem
      - key: tlscacert.pem
        path: tlscacerts/cert.pem

  - name: peer-{{ $org.Name | lower }}-msp
    secret:
      secretName: hlf-peer--{{ $org.Name | lower }}--msp
      items:
      - key: cacert.pem
        path: cacerts/ca.{{ $org.Domain}}-cert.pem

{{- range $peerIndex := until ($org.Template.Count | int) }}
{{- $peer := (printf "peer%s" ($peerIndex | toString)) }}

  - name: peer-{{ $org.Name | lower }}-{{ $peer | lower }}-tls
    secret:
      secretName: hlf-peer--{{ $org.Name | lower }}--{{ $peer | lower }}-tls
{{ end }} {{- /* Peers */ -}}
{{ end }} {{- /* PeerOrgs */ -}}{{""}}

  templates:
  - name: channels
    steps:
# top level: channels
{{- $_ := set $vars "firstStep" true }}
{{- range $i, $channel := .Values.network.channels }}
{{- if or (not $.Values.flow.channel.include) (has $channel.name $.Values.flow.channel.include) }}
{{- if or $vars.firstStep (not $.Values.flow.channel.parallel) }}
    - 
{{- end }}
      - name: channel--{{ $channel.name }}
        template: channel--{{ $channel.name }}
      
{{- $_ := set $vars "firstStep" false }}
{{- end }} {{- /* if channel included */ -}}
{{- end }} {{- /* channels */ -}}{{""}}

# second level: channel templates
{{- range $i, $channel := .Values.network.channels }}
{{- if or (not $.Values.flow.channel.include) (has $channel.name $.Values.flow.channel.include) }}
  - name: channel--{{ $channel.name }}
    steps:
    - - name: create-channel--{{ $channel.name }}
        template: create-channel--{{ $channel.name }}
    - - name: join-channel--{{ $channel.name }}
        template: join-channel--{{ $channel.name }}
    - - name: update-channel--{{ $channel.name }}
        template: update-channel--{{ $channel.name }}
{{- end }} {{- /* if channel included */ -}}
{{- end }} {{- /* channels */ -}}{{""}}

# third level: channel create templates
{{ range $i, $channel := .Values.network.channels }}
{{- if or (not $.Values.flow.channel.include) (has $channel.name $.Values.flow.channel.include) }}
  - name: create-channel--{{ $channel.name }}
    steps:
    - 
{{- $orgName := index $channel.orgs 0 }}
{{- range $i, $org := $.Values.PeerOrgs }}

{{- if eq $orgName $org.Name }}

      - name: maybe-create-channel--{{ $channel.name }}--{{ $org.Name }}
        template: maybe-create-channel--{{ $channel.name }}--{{ $org.Name }}

{{- end }} {{- /* if org */ -}} 
{{- end }} {{- /* channel.orgs */ -}}
{{- end }} {{- /* if channel included */ -}}
{{- end }} {{- /* channels */ -}}{{""}}

# third level: channel join templates
{{ range $i, $channel := .Values.network.channels }}
{{- if or (not $.Values.flow.channel.include) (has $channel.name $.Values.flow.channel.include) }}
{{- $_ := set $vars "firstStep" true }}
  - name: join-channel--{{ $channel.name }}
    steps:
{{- range $orgName := $channel.orgs }}
{{- range $i, $org := $.Values.PeerOrgs }}

{{- if eq $orgName $org.Name }}

{{- range $peerIndex := until ($org.Template.Count | int) }}
{{- $peer := (printf "peer%s" ($peerIndex | toString)) }}
{{- if or $vars.firstStep (not $.Values.flow.join.parallel) }}
    - 
{{- end }}
      - name: maybe-join-channel--{{ $channel.name }}--{{ $org.Name }}--{{ $peer }}
        template: maybe-join-channel--{{ $channel.name }}--{{ $org.Name }}--{{ $peer }}

{{- $_ := set $vars "firstStep" false }}

{{- end }} {{- /* peerIndex */ -}} 
{{- end }} {{- /* if org */ -}} 
{{- end }} {{- /* peer.Orgs */ -}}
{{- end }} {{- /* channel.orgs */ -}}
{{- end }} {{- /* if channel included */ -}}
{{- end }} {{- /* channels */ -}}{{""}}

# third level: channel update templates
{{ range $i, $channel := .Values.network.channels }}
{{- if or (not $.Values.flow.channel.include) (has $channel.name $.Values.flow.channel.include) }}
{{- $_ := set $vars "firstStep" true }}
  - name: update-channel--{{ $channel.name }}
    steps:
{{- range $orgName := $channel.orgs }}
{{- range $i, $org := $.Values.PeerOrgs }}

{{- if eq $orgName $org.Name }}

{{- if or $vars.firstStep (not $.Values.flow.update.parallel) }}
    - 
{{- end }}
      - name: maybe-update-channel--{{ $channel.name }}--{{ $org.Name }}
        template: maybe-update-channel--{{ $channel.name }}--{{ $org.Name }}

{{- $_ := set $vars "firstStep" false }}

{{- end }} {{- /* if org */ -}} 
{{- end }} {{- /* peer.Orgs */ -}}
{{- end }} {{- /* channel.orgs */ -}}
{{- end }} {{- /* if channel included */ -}}
{{- end }} {{- /* channels */ -}} {{""}}

# leaf create templates
{{- range $i, $channel := .Values.network.channels }}
{{- if or (not $.Values.flow.channel.include) (has $channel.name $.Values.flow.channel.include) }}
{{- $orgName := index $channel.orgs 0 }}
{{- range $i, $org := $.Values.PeerOrgs }}
{{- $peer := (printf "peer0" ) }}
{{- if eq $orgName $org.Name }}

  - name: maybe-create-channel--{{ $channel.name }}--{{ $org.Name }}
    inputs:
    retryStrategy:
      limit: {{ $.Values.retryCount }}
    script:
      image: {{ $.Values.fabric_images.tools }}
      command: [sh]
      source: |
          set -x
          # verify if channel exists
          if peer channel getinfo --channelID {{ $channel.name }} -o {{ $vars.ordererUrl }} {{- if $.Values.tlsEnabled }} --tls --cafile /hlf_config/orderer-tlsca/tlscacert.pem {{- end }}
          then  
              echo '-- Channel {{ $channel.name }} already exists, exiting with 0' 
              exit 0 
          fi

          echo '-- Channel {{ $channel.name }} does not exists, will create..' 

          mkdir -p /work && 
          configtxgen -profile {{ $channel.name }} -channelID {{ $channel.name }} -configPath /hlf_config \
                -outputCreateChannelTx /work/{{ $channel.name }}.tx  

          peer channel create -o {{ $vars.ordererUrl }} -c {{ $channel.name }} -f /work/{{ $channel.name }}.tx \
              {{- if $.Values.tlsEnabled }}
                  --tls --cafile /hlf_config/orderer-tlsca/tlscacert.pem \
              {{- end }}
          set +x   
 
      volumeMounts:
        - mountPath: /hlf_config/orderer-tlsca
          name: orderer-tlsca
        - mountPath: /etc/hyperledger/fabric/msp/
          name: peer-{{ $org.Name | lower }}-admin-msp
        - mountPath: /hlf_config/
          name: hlf-configtx
        - mountPath: /etc/hyperledger/fabric/tls/
          name: peer-{{ $org.Name | lower }}-{{ $peer | lower }}-tls


        # peer org msp's required for configtxgen
        {{- range $i, $org := $.Values.PeerOrgs }}
        - mountPath: /hlf_config/crypto-config/peerOrganizations/{{ $org.Domain }}/msp/
          name: peer-{{ $org.Name | lower }}-msp
        {{- end }}

      env:
        - name: CORE_PEER_TLS_ENABLED
          value: {{ $.Values.tlsEnabled | quote }}
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.logLevel }}
        - name: CORE_PEER_LOCALMSPID
          value: {{ $org.Name }}MSP
        - name: CORE_PEER_MSPCONFIGPATH 
          value: /etc/hyperledger/fabric/msp/
        - name: CORE_PEER_TLS_CERT_FILE
          value: /etc/hyperledger/fabric/tls/server.crt
        - name: CORE_PEER_TLS_KEY_FILE
          value: /etc/hyperledger/fabric/tls/server.key
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: /etc/hyperledger/fabric/tls/ca.crt
        - name: CORE_PEER_ADDRESS
          value: |- 
              {{- if $.Values.useActualDomains }}
                {{ $peer }}.{{ $org.Domain }}:7051
              {{- else }}
                hlf-peer--{{ $org.Name | lower }}--{{ $peer | lower }}:7051
              {{- end }}

{{- end }} {{- /* if org */ -}} 
{{- end }} {{- /* channel.orgs */ -}}
{{- end }} {{- /* if channel included */ -}}
{{- end }} {{- /* channels */ -}}{{""}}

# leaf join templates
{{- range $i, $channel := .Values.network.channels }}
{{- if or (not $.Values.flow.channel.include) (has $channel.name $.Values.flow.channel.include) }}
{{- range $orgName := $channel.orgs }}
{{- range $i, $org := $.Values.PeerOrgs }}

{{- if eq $orgName $org.Name }}

{{- range $peerIndex := until ($org.Template.Count | int) }}
{{- $peer := (printf "peer%s" ($peerIndex | toString)) }}

  - name: maybe-join-channel--{{ $channel.name }}--{{ $org.Name }}--{{ $peer }}
    inputs:
    retryStrategy:
      limit: {{ $.Values.retryCount }}
    script:
      image: {{ $.Values.fabric_images.tools }}
      command: [sh]
      source: |
          set -x
          # verify if peer has already joined the channel
          result=$(peer channel list)
          for value in $result
          do
              if [[ $value == {{ $channel.name }} ]]; then
                echo '-- Peer {{ $peer }} already joined to channel {{ $channel.name }}, exiting with 0' 
                exit 0 
              fi
          done

          echo '-- Peer {{ $peer }} did not join to channel {{ $channel.name }}, will join..' 

          mkdir -p /var/hyperledger &&
          peer channel fetch oldest /var/hyperledger/genesis.block -c {{ $channel.name }} -o {{ $vars.ordererUrl }} \
              {{- if $.Values.tlsEnabled }}
                  --tls --cafile /hlf_config/orderer-tlsca/tlscacert.pem \
              {{- end }}
          && echo '-- fetched genesis block for channel {{ $channel.name }}' && 
          
          peer channel join -b /var/hyperledger/genesis.block
          set +x

      volumeMounts:
        - mountPath: /hlf_config/orderer-tlsca
          name: orderer-tlsca
        - mountPath: /etc/hyperledger/fabric/tls/
          name: peer-{{ $org.Name | lower }}-{{ $peer | lower }}-tls
        - mountPath: /etc/hyperledger/fabric/msp/
          name: peer-{{ $org.Name | lower }}-admin-msp
      
      env:
        - name: CORE_PEER_ADDRESS
          value: |- 
              {{- if $.Values.useActualDomains }}
                {{ $peer }}.{{ $org.Domain }}:7051
              {{- else }}
                hlf-peer--{{ $org.Name | lower }}--{{ $peer | lower }}:7051
              {{- end }}
        - name: CORE_PEER_TLS_ENABLED
          value: {{ $.Values.tlsEnabled | quote }}
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.logLevel }}
        - name: CORE_PEER_LOCALMSPID
          value: {{ $org.Name }}MSP
        - name: CORE_PEER_MSPCONFIGPATH 
          value: /etc/hyperledger/fabric/msp/
        - name: CORE_PEER_TLS_CERT_FILE
          value: /etc/hyperledger/fabric/tls/server.crt
        - name: CORE_PEER_TLS_KEY_FILE
          value: /etc/hyperledger/fabric/tls/server.key
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: /etc/hyperledger/fabric/tls/ca.crt

{{- end }} {{- /* peerIndex */ -}} 
{{- end }} {{- /* if org */ -}} 
{{- end }} {{- /* peer.Orgs */ -}}
{{- end }} {{- /* channel.orgs */ -}}
{{- end }} {{- /* if channel included */ -}}
{{- end }} {{- /* channels */ -}}{{""}}

# leaf update templates
{{- range $i, $channel := .Values.network.channels }}
{{- if or (not $.Values.flow.channel.include) (has $channel.name $.Values.flow.channel.include) }}
{{- range $orgName := $channel.orgs }}
{{- range $i, $org := $.Values.PeerOrgs }}

{{- if eq $orgName $org.Name }}

  - name: maybe-update-channel--{{ $channel.name }}--{{ $org.Name }}
    inputs:
    retryStrategy:
      limit: {{ $.Values.retryCount }}
    script:
      image: {{ $.Values.fabric_images.tools }}
      command: [sh]
      source: |
          set -x
          mkdir -p /work && 
          peer channel fetch config /work/config_block.pb -c {{ $channel.name }} -o {{ $vars.ordererUrl }} \
              {{- if $.Values.tlsEnabled }}
                  --tls --cafile /hlf_config/orderer-tlsca/tlscacert.pem \
              {{- end }}
          &&  echo '-- fetched config block' && 
          
          # verify if AnchorPeers are already configured for the organization 
          if configtxlator proto_decode --input /work/config_block.pb --type common.Block | jq .data.data[0].payload.data.config | jq -e '.channel_group | .groups | .Application | .groups | .'$(echo {{ $org.Name }}MSP)'  | .values | .AnchorPeers ' > /dev/null; then  
            echo '-- AnchorPeers are already configured for organization {{ $org.Name }}, exiting with 0' 
            exit 0 
          fi

          # install yq if it does not exist
          [ ! -f "/usr/bin/yq" ] && (wget https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64.tar.gz -O - | tar xz && mv yq_linux_amd64 /usr/bin/yq)

          echo '-- AnchorPeers are not configured for organization {{ $org.Name }}, will configure..' 

          configtxlator proto_decode --input /work/config_block.pb --type common.Block | jq .data.data[0].payload.data.config > /work/config.json && 
          echo '-- trimmed envelope from config block and converted to json' && 
          /hlf-scripts/attach_anchor_peers.sh {{ $org.Name }}MSP /hlf_config/configtx.yaml /work/config.json /work/updated_config.json && 
          
          /hlf-scripts/prepare_config_update_block.sh {{ $channel.name }} /work/config.json /work/updated_config.json /work/update.pb && 
          
          peer channel update -f /work/update.pb -c {{ $channel.name }} -o {{ $vars.ordererUrl }} \
              {{- if $.Values.tlsEnabled }}
                  --tls --cafile /hlf_config/orderer-tlsca/tlscacert.pem \
              {{- end }}
          set +x

      volumeMounts:
        - mountPath: /hlf_config/orderer-tlsca
          name: orderer-tlsca
        - mountPath: /etc/hyperledger/fabric/msp/
          name: peer-{{ $org.Name | lower }}-admin-msp
        - mountPath: /hlf-scripts
          name: hlf-scripts
        - mountPath: /hlf_config/
          name: hlf-configtx
      
      env:
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.logLevel }}
        - name: CORE_PEER_LOCALMSPID
          value: {{ $org.Name }}MSP
        - name: CORE_PEER_MSPCONFIGPATH 
          value: /etc/hyperledger/fabric/msp/
        - name: CORE_PEER_TLS_CERT_FILE
          value: /etc/hyperledger/fabric/tls/server.crt
        - name: CORE_PEER_TLS_KEY_FILE
          value: /etc/hyperledger/fabric/tls/server.key
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: /etc/hyperledger/fabric/tls/ca.crt

{{- end }} {{- /* if org */ -}} 
{{- end }} {{- /* peerOrgs */ -}}
{{- end }} {{- /* channel.orgs */ -}}
{{- end }} {{- /* if channel included */ -}}
{{- end }} {{- /* channels */ -}}{{""}}
---
